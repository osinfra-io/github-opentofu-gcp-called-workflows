name: Plan and Apply Called Workflow

on:
  workflow_call:
    inputs:
      checkout_ref:
        required: true
        type: string
      github_env:
        required: true
        type: string
      service_account:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      tf_plan_args:
        required: true
        type: string
      tf_state_bucket:
        required: true
        type: string
      tf_workspace:
        required: true
        type: string
      working_dir:
        required: true
        type: string
      workload_identity_provider:
        required: true
        type: string

    secrets:
      gpg_passphrase:
        required: true

      # Uncomment if you have private modules
      # ssh_key:
      #   required: true

      tf_plan_secret_args:
        required: false

# If you use private modules you'll need this env variable to use
# the same ssh-agent socket value across all jobs & steps.
# env:
#  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

permissions:
  # The job or workflow run requires a permissions setting with id-token: write.
  # You won't be able to request the OIDC JWT ID token if the permissions setting
  # for id-token is set to read or none.

  id-token: write

jobs:
  plan:
    name: "Terraform: plan"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Run step checkout
        uses: actions/checkout@v3.2.0
        with:
          ref: ${{ inputs.checkout_ref }}

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Run step authenticate-to-google-cloud
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ inputs.service_account }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}

      # GitHub - Setup SSH for Module Access
      # Uncomment if you have private modules

      # - name: Run step ssh for private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Run step setup-terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Run step terraform init
        run: terraform init -backend-config="bucket=${{ inputs.tf_state_bucket }}"

      - name: Run step terraform workspace
        run: >-
          terraform workspace select ${{ inputs.tf_workspace }} ||
          terraform workspace new ${{ inputs.tf_workspace }}

      - name: Run step terraform fmt
        run: terraform fmt -check -diff

      - name: Run step terraform validate
        run: terraform validate

      - name: Run step terraform plan
        id: plan
        run: terraform plan -detailed-exitcode -input=false -out=plan.out ${{ inputs.tf_plan_args}} ${{ secrets.tf_plan_secret_args }}

      # Encrypt - Terraform plan.out

      - name: Run step encrypt plan.out
        if: steps.plan.outputs.exitcode == 2
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --symmetric --cipher-algo AES256 plan.out

      # Github - Upload Artifact
      # https://github.com/marketplace/actions/upload-a-build-artifact

      - name: Run step upload-artifact
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ inputs.tf_workspace }}-encrypted-plan
          path: ${{ inputs.working_dir }}/plan.out.gpg

    outputs:
      planExitcode: ${{ steps.plan.outputs.exitcode }}

  apply:
    name: "Terraform: apply"
    needs: plan
    if: needs.plan.outputs.planExitcode == 2
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github_env }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Run step checkout
        uses: actions/checkout@v3.2.0
        with:
          ref: ${{ inputs.checkout_ref }}

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Run step authenticate-to-google-cloud
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ inputs.service_account }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}

      # GitHub - Setup SSH for Module Access
      # Uncomment if you have private modules

      # - name: Run step ssh for private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # Github - Download Artifact
      # https://github.com/marketplace/actions/download-a-build-artifact

      - name: Run step download-artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ inputs.tf_workspace }}-encrypted-plan
          path: ${{ inputs.working_dir }}

      # Decrypt - Terraform plan.out

      - name: Run step decrypt plan.out
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --output plan.out plan.out.gpg

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Run step setup-terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Run step terraform init
        run: terraform init -backend-config="bucket=${{ inputs.tf_state_bucket }}"

      - name: Run step terraform workspace
        run: terraform workspace select ${{ inputs.tf_workspace }}

      - name: Run step terraform apply
        run: terraform apply plan.out
