name: Plan and Apply Called Workflow

on:
  workflow_call:
    inputs:
      checkout_ref:
        required: true
        type: string
      environment:
        required: true
        type: string
      github_environment:
        required: true
        type: string
      service_account:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      terraform_plan_args:
        required: false
        type: string
      terraform_state_bucket:
        required: true
        type: string
      terraform_workspace:
        required: true
        type: string
      working_directory:
        required: false
        type: string
        default: .
      workload_identity_provider:
        required: true
        type: string

    secrets:
      gpg_passphrase:
        required: true
      infracost_api_key:
        required: true

      # Uncomment if you have private modules

      # ssh_key:
      #   required: true

      terraform_plan_secret_args:
        required: false

# If you use private modules you'll need this env variable to use
# the same ssh-agent socket value across all jobs & steps.

# env:
#  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      # GitHub - Cache
      # https://github.com/marketplace/actions/cache

      - name: Debug
        working-directory: .
        run: |
          echo ${{ inputs.checkout_ref }}
          echo ${{ github.ref }}
          echo ${{ github.ref.before }}
          echo ${{ github.ref.after }}
          echo ${{ github.ref.head }}
          echo ${{ github.ref.base }}
          echo ${{ github.ref.head_ref }}
          echo ${{ github.ref.base_ref }}
          echo ${{ github.ref.pull_request }}
          echo ${{ github.ref.pull_request_head }}
          echo ${{ github.ref.pull_request_base }}
          echo ${{ github.ref.pull_request_head_ref }}
          echo ${{ github.ref.pull_request_base_ref }}
          echo ${{ github.ref.pull_request_head_sha }}


      - name: Setup cache
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ inputs.working_directory }}/.terraform
            ${{ inputs.working_directory }}/.terraform.lock.hcl
            ${{ inputs.working_directory }}/plan.out.gpg
          key: ${{ inputs.terraform_workspace }}-${{ github.run_id }}-${{ github.run_attempt }}

      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Infracost checkout on PR branch
        uses: actions/checkout@v3.5.0
        if: ${{ inputs.checkout_ref != 'refs/heads/main'}}
        with:
          ref: main

      - name: Infracost checkout on main branch
        uses: actions/checkout@v3.5.0
        if: ${{ inputs.checkout_ref == 'refs/heads/main'}}
        with:
          ref: ${{ github.ref.before }}


      # Infracost - Setup Infracost
      # https://github.com/marketplace/actions/infracost-actions

      - name: Infracost setup
        uses: infracost/actions/setup@v2.1.0
        with:
          api-key: ${{ secrets.infracost_api_key }}

      - name: Infracost pull request breakdown
        if: ${{ inputs.checkout_ref != 'refs/heads/main'}}
        run: |
          infracost breakdown --path . \
                              --terraform-var-file tfvars/${{ inputs.environment }}.tfvars \
                              --usage-file infracost/${{ inputs.environment }}.yml \
                              --format json \
                              --out-file /tmp/infracost.json

      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Checkout
        uses: actions/checkout@v3.5.0
        with:
          ref: ${{ inputs.checkout_ref }}

      - name: Infracost diff on PR branch
        if: ${{ inputs.checkout_ref != 'refs/heads/main'}}
        run: |
          infracost diff --path . \
                         --compare-to /tmp/infracost.json \
                         --terraform-var-file tfvars/${{ inputs.environment }}.tfvars \
                         --usage-file infracost/${{ inputs.environment }}.yml \
                         --format json \
                         --out-file /tmp/infracost-pr.json

      - name: Infracost diff on main branch
        if: ${{ inputs.checkout_ref == 'refs/heads/main'}}
        run: |
          infracost diff --path . \
                         --compare-to /tmp/infracost.json \
                         --terraform-var-file tfvars/${{ inputs.environment }}.tfvars \
                         --usage-file infracost/${{ inputs.environment }}.yml \
                         --format json \
                         --out-file /tmp/infracost-main.json

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Authenticate
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ inputs.service_account }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}

      # GitHub - Setup SSH for private module access
      # Uncomment if you have private modules

      # - name: Private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform format
        run: terraform fmt -check -diff

      - name: Terraform initialize
        run: terraform init -backend-config="bucket=${{ inputs.terraform_state_bucket }}"

      - name: Terraform workspace
        run: >-
          terraform workspace select ${{ inputs.terraform_workspace }} ||
          terraform workspace new ${{ inputs.terraform_workspace }}

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -detailed-exitcode -input=false -out=plan.out ${{ inputs.terraform_plan_args}} ${{ secrets.terraform_plan_secret_args }}

      - name: Terraform show
        id: show
        run: terraform show -no-color plan.out

      - name: Infracost summary on PR branch
        if: ${{ inputs.checkout_ref != 'refs/heads/main'}}
        run: |
          infracost output --path /tmp/infracost-pr.json \
                           --format github-comment >> $GITHUB_STEP_SUMMARY

      - name: Infracost summary on main branch
        if: ${{ inputs.checkout_ref == 'refs/heads/main'}}
        run: |
          infracost output --path /tmp/infracost-main.json \
                           --format github-comment >> $GITHUB_STEP_SUMMARY

      - name: Terraform summary
        run: |
          echo '🛠️ Terraform plan:' >> $GITHUB_STEP_SUMMARY
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.show.outputs.stdout }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Encrypt - Terraform plan.out

      # If your plan includes any sort of sensitive data, even if obscured in Terraform's terminal output,
      # it will be saved in cleartext in the plan file. You should therefore treat any saved plan files as
      # potentially-sensitive artifacts.

      - name: Encrypt
        if: steps.plan.outputs.exitcode == 2
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --symmetric --cipher-algo AES256 plan.out

    outputs:
      plan-exit-code: ${{ steps.plan.outputs.exitcode }}

  apply:
    name: Terraform apply
    needs: plan
    if: needs.plan.outputs.plan-exit-code == 2
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github_environment }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Checkout
        uses: actions/checkout@v3.5.0
        with:
          ref: ${{ inputs.checkout_ref }}

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Authenticate
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ inputs.service_account }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}

      # GitHub - Setup SSH for private module access
      # Uncomment if you have private modules

      # - name: Private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # GitHub - Cache
      # https://github.com/marketplace/actions/cache

      - name: Restore cache
        uses: actions/cache/restore@v3.3.1
        with:
          path: |
            ${{ inputs.working_directory }}/.terraform
            ${{ inputs.working_directory }}/.terraform.lock.hcl
            ${{ inputs.working_directory }}/plan.out.gpg
          key: ${{ inputs.terraform_workspace }}-${{ github.run_id }}-${{ github.run_attempt }}

      # Decrypt - Terraform plan.out

      - name: Decrypt
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --output plan.out plan.out.gpg

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform apply
        id: apply
        run: terraform apply -no-color plan.out

      - name: Job summary
        run: |
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.apply.outputs.stdout }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
