name: Plan and Apply Called Workflow

on:
  workflow_call:
    inputs:
      checkout_ref:
        required: true
        type: string
      github_environment:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      terraform_plan_args:
        required: false
        type: string
      terraform_workspace:
        required: true
        type: string
      working_directory:
        required: false
        type: string
        default: .

    secrets:
      gpg_passphrase:
        required: true
      service_account:
        required: true

      # Uncomment if you have private modules

      # ssh_key:
      #   required: true

      terraform_plan_secret_args:
        required: false
      terraform_state_bucket:
        required: true
      workload_identity_provider:
        required: true

# If you use private modules you'll need this env variable to use
# the same ssh-agent socket value across all jobs & steps.

# env:
#  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github_environment }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ inputs.checkout_ref }}

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Authenticate
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ secrets.service_account }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}

      # GitHub - Setup SSH for Module Access
      # Uncomment if you have private modules

      # - name: Step ssh for private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # GitHub - Cache
      # https://github.com/marketplace/actions/cache

      - name: Setup Cache
        uses: actions/cache@v3.3.1
        with:
          path: |
            ${{ inputs.working_directory }}/.terraform/providers
            ${{ inputs.working_directory }}/.terraform/modules
            ${{ inputs.working_directory }}/plan.out.gpg
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform Initialize
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.terraform_state_bucket }}"

      - name: Terraform Workspace
        run: >-
          terraform workspace select ${{ inputs.terraform_workspace }} ||
          terraform workspace new ${{ inputs.terraform_workspace }}

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -detailed-exitcode -input=false -out=plan.out ${{ inputs.terraform_plan_args}} ${{ secrets.terraform_plan_secret_args }}

      - name: Terraform Plan Output
        id: plan-output
        uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      - name: Job Summary
        run: echo '${{ steps.plan-output.outputs.result }}' >> $GITHUB_STEP_SUMMARY

      # Encrypt - Terraform plan.out

      # If your plan includes any sort of sensitive data, even if obscured in Terraform's terminal output,
      # it will be saved in cleartext in the plan file. You should therefore treat any saved plan files as
      # potentially-sensitive artifacts.

      - name: Encrypt
        if: steps.plan.outputs.exitcode == 2
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --symmetric --cipher-algo AES256 plan.out

    outputs:
      plan-exit-code: ${{ steps.plan.outputs.exitcode }}

  apply:
    name: Terraform Apply
    needs: plan
    if: needs.plan.outputs.plan-exit-code == 2
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github_environment }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      # GitHub - Checkout
      # https://github.com/marketplace/actions/checkout

      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ inputs.checkout_ref }}

      # Google Cloud Platform - Authenticate to Google Cloud
      # https://github.com/marketplace/actions/authenticate-to-google-cloud

      - name: Authenticate
        uses: google-github-actions/auth@v1.0.0
        with:
          create_credentials_file: true
          service_account: ${{ secrets.service_account }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}

      # GitHub - Setup SSH for Module Access
      # Uncomment if you have private modules

      # - name: Step ssh for private module access
      #   run: |
      #     ssh-agent -a $SSH_AUTH_SOCK
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.ssh_key }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts

      # GitHub - Cache
      # https://github.com/marketplace/actions/cache

      - name: Restore Cache
        uses: actions/cache/restore@v3.3.1
        with:
          path: |
            ${{ inputs.working_directory }}/.terraform/providers
            ${{ inputs.working_directory }}/.terraform/modules
            ${{ inputs.working_directory }}/plan.out.gpg
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}

      # Decrypt - Terraform plan.out

      - name: Decrypt
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.gpg_passphrase }} --output plan.out plan.out.gpg

      # HashiCorp - Setup Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Initialize
        run: terraform init -backend-config="bucket=${{ secrets.terraform_state_bucket }}"

      - name: Terraform Workspace
        run: terraform workspace select ${{ inputs.terraform_workspace }}

      - name: Terraform Apply
        run: terraform apply plan.out
